import tkinter as tk
from tkinter import messagebox
from PIL import ImageTk, Image
import subprocess
import sqlite3
import os
from lib2to3.pygram import Symbols
import numbers
import random

#file name for database
DATABASE = "users.db"

#initialise database then create users table if it doesn't exist
def initialize_db():
    connection = sqlite3.connect(DATABASE)
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      username TEXT NOT NULL UNIQUE,
                      password TEXT NOT NULL)''')
    connection.commit()
    connection.close()

#shows random recommended password for register
def generate_password():
    lower = 'abcdefghijklmnopqrstuvwxyz'
    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    numbers = '0123456789'
    symbols = '`@#$%^&*]'
    all_chars = lower + upper + numbers + symbols
    length = 16
    password = "".join(random.sample(all_chars, length))
    return password

#when clicking play, if user is not logged in show message.
def play():
    if not hasattr(root, 'logged_in') or not root.logged_in:
        messagebox.showwarning("Warning", "Login to save progress")
        login_window = logwindow(root, redirect_to_dashboard=True)
    else:
        redirect_to_dashboard()

#defines and opens register page
def register():
    register_window = regwindow(root)

#defines and opens login page
def login():
    login_window = logwindow(root)

#redirects to scene1
def redirect_to_dashboard():
    subprocess.run(["python", "dashboard.py"])

#exit homepage
def exit_out():
    if messagebox.askokcancel("Exit", "Exit now?"):
        root.destroy()

#help page
def help():
    messagebox.showinfo("Help", "Help Page")

#clears all widgets
def return_to_homepage():
    for widget in root.winfo_children():
        widget.destroy()
    main_homepage()

def main_homepage():
    #background image
    background_image = Image.open("bflanding.jpg")
    background_image = background_image.resize((root.winfo_screenwidth(), root.winfo_screenheight()))
    background_photo = ImageTk.PhotoImage(background_image)

    #label for background image
    background_label = tk.Label(root, image=background_photo)
    background_label.image = background_photo
    background_label.place(x=0, y=0, relwidth=1, relheight=1)

    #fullscreen mode
    root.attributes("-fullscreen", True)

    #register and login button frame
    button_frame = tk.Frame(root)
    button_frame.pack(side=tk.TOP, anchor=tk.NE, padx=10, pady=5)

    #register button
    register_button = tk.Button(button_frame, text="Register", command=register, width=15, height=3, font=("MS Gothic", 12))
    register_button.pack(side=tk.RIGHT, padx=5)

    #login button
    login_button = tk.Button(button_frame, text="Login", command=login, width=15, height=3, font=("MS Gothic", 12))
    login_button.pack(side=tk.RIGHT)    

    #title label
    title_label = tk.Label(root, text="BESOTTED FATE", font=("MS Gothic", 50), fg="black")
    title_label.pack(pady=(150, 40))   

    #play button
    play_button = tk.Button(root, text="Play", command=play, width=20, height=5, font=("MS Gothic", 15))
    play_button.pack(pady=(20, 10))

    #help button
    help_button = tk.Button(root, text="Help", command=help, width=20, height=5, font=("MS Gothic", 15))
    help_button.pack(pady=10)

    #exit button
    exit_button = tk.Button(root, text="Exit", command=exit_out, width=20, height=5, font=("MS Gothic", 15))
    exit_button.pack(pady=10, anchor=tk.CENTER)
    
class logwindow:
    def __init__(self, master, redirect_to_dashboard=False):
        #new login window
        self.top = tk.Toplevel(master)
        self.top.title("Login")
        
        #after login, it redirects to dashboard
        self.redirect_to_dashboard = redirect_to_dashboard

        #fullscreen mode
        self.top.attributes("-fullscreen", True)    

        #background image
        background_image = Image.open("bftruck2.jpg")
        background_image = background_image.resize((self.top.winfo_screenwidth(), self.top.winfo_screenheight()))
        self.background_photo = ImageTk.PhotoImage(background_image)
        self.background_label = tk.Label(self.top, image=self.background_photo)
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)

        #login frame
        frame = tk.Frame(self.top, bg="white")
        frame.pack(expand=True)

        #font style and size
        label_font = ("MS Gothic", 20)
        entry_font = ("MS Gothic", 20)
        button_font = ("MS Gothic", 20)

        #labels and entry widgets for username and password
        tk.Label(frame, text="Username", font=label_font, bg="white").grid(row=0, column=0, pady=10, padx=10)
        tk.Label(frame, text="Password", font=label_font, bg="white").grid(row=1, column=0, pady=10, padx=10)
        self.e1 = tk.Entry(frame, font=entry_font)
        self.e1.grid(row=0, column=1, pady=10, padx=10)
        self.e2 = tk.Entry(frame, font=entry_font)
        self.e2.grid(row=1, column=1, pady=10, padx=10)
        self.e2.config(show="*")

        #login button
        tk.Button(frame, text="Login", command=self.Ok, height=2, width=10, font=button_font).grid(row=2, columnspan=2, pady=20)

        #links to register page
        tk.Label(frame, text="Don't have an account?", font=label_font, bg="white").grid(row=3, columnspan=2, pady=(20, 5))
        tk.Button(frame, text="Register Here", command=register, height=2, width=15, font=button_font).grid(row=4, columnspan=2)

        #return buton
        tk.Button(frame, text="Return", command=self.return_to_homepage, height=2, width=10, font=button_font).grid(row=5, columnspan=2, pady=20)
        
    def Ok(self):
        #gets the username and password from the entry widgets
        uname = self.e1.get()
        password = self.e2.get()

        #if no input show warning
        if uname == "" or password == "":
            messagebox.showinfo("", "Please fill out all fields.")
            return
        #checks database info
        connection = sqlite3.connect(DATABASE)
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (uname, password))
        user = cursor.fetchone()
        connection.close()
        #if matching info with database, allow access.
        if user:
            messagebox.showinfo("", "Login Success")
            root.logged_in = True
            self.top.destroy()
            if self.redirect_to_dashboard:
                redirect_to_dashboard()
        else:
            messagebox.showinfo("", "Incorrect Username and Password")

    def return_to_homepage(self):
        #exits out of page to homepage
        self.top.destroy()
        return_to_homepage()

class regwindow:
    def __init__(self, master):
        #new toplevel window for registration
        self.top = tk.Toplevel(master)
        self.top.title("Register")
        self.top.attributes("-fullscreen", True)    

        #background image
        background_image = Image.open("bftruck2.jpg")
        background_image = background_image.resize((self.top.winfo_screenwidth(), self.top.winfo_screenheight()))
        self.background_photo = ImageTk.PhotoImage(background_image)
        self.background_label = tk.Label(self.top, image=self.background_photo)
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)

        #form for regsitration
        frame = tk.Frame(self.top, bg="white")
        frame.pack(expand=True)

        #font style and size
        label_font = ("MS Gothic", 20)
        entry_font = ("MS Gothic", 20)
        button_font = ("MS Gothic", 20)

        #labels and entry widgets for username, password, and confirm password
        tk.Label(frame, text="Username", font=label_font, bg="white").grid(row=0, column=0, pady=10, padx=10)
        tk.Label(frame, text="Password", font=label_font, bg="white").grid(row=1, column=0, pady=10, padx=10)
        tk.Label(frame, text="Confirm Password", font=label_font, bg="white").grid(row=2, column=0, pady=10, padx=10)
        self.e1 = tk.Entry(frame, font=entry_font)
        self.e1.grid(row=0, column=1, pady=10, padx=10)
        self.e2 = tk.Entry(frame, font=entry_font)
        self.e2.grid(row=1, column=1, pady=10, padx=10)
        self.e2.config(show="*")
        self.e3 = tk.Entry(frame, font=entry_font)
        self.e3.grid(row=2, column=1, pady=10, padx=10)
        self.e3.config(show="*")

        #register button
        tk.Button(frame, text="Register", command=self.Ok, height=2, width=10, font=button_font).grid(row=3, columnspan=2, pady=20)

        #show random password
        self.recommended_password = generate_password()
        tk.Label(frame, text="Recommended Password:", font=label_font, bg="white").grid(row=4, column=0, pady=10, padx=10)
        self.recommended_password_label = tk.Label(frame, text=self.recommended_password, font=entry_font, bg="white")
        self.recommended_password_label.grid(row=4, column=1, pady=10, padx=10)
        #copy button
        self.copy_button = tk.Button(frame, text="Copy", command=self.copy_to_clipboard, height=2, width=10, font=button_font)
        self.copy_button.grid(row=5, columnspan=2, pady=10, padx=10)
    
        #link to login page
        tk.Label(frame, text="Already have an account?", font=label_font, bg="white").grid(row=6, columnspan=2, pady=(20, 5))
        tk.Button(frame, text="Login", command=self.redirect_to_login, height=2, width=15, font=button_font).grid(row=7, columnspan=2)

        #return button
        tk.Button(frame, text="Return", command=self.return_to_homepage, height=2, width=10, font=button_font).grid(row=8, columnspan=2, pady=20)

    def Ok(self):
        #gets username, password, and confirm password from the entry widgets
        uname = self.e1.get()
        password = self.e2.get()
        confirm_password = self.e3.get()

        #if no user input, display warning
        if uname == "" or password == "" or confirm_password == "":
            messagebox.showinfo("", "Please fill out all fields.")
            return

        #confirms matching password
        if password != confirm_password:
            messagebox.showinfo("", "Passwords do not match.")
            return
        
        #puts new user data into database
        connection = sqlite3.connect(DATABASE)
        cursor = connection.cursor()
        try:
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (uname, password))
            connection.commit()
            messagebox.showinfo("", "Registration Successful")
            self.top.destroy()
        except sqlite3.IntegrityError:
            messagebox.showinfo("", "Username already exists.")
        finally:
            connection.close()
        #copy function
    def copy_to_clipboard(self):
        self.top.clipboard_clear()
        self.top.clipboard_append(self.recommended_password)

    def redirect_to_login(self):
        #close current window and open the login window
        self.top.destroy()
        login()

    def return_to_homepage(self):
        #close current window and return to the homepage
        self.top.destroy()
        return_to_homepage()

    
#main application window
root = tk.Tk()
root.title("Besotted Fate")
initialize_db()
main_homepage()
root.mainloop()
