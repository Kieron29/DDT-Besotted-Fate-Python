import tkinter as tk
from tkinter import messagebox
from PIL import ImageTk, Image
import subprocess
import sqlite3
import random

#file name for database
DATABASE = "users.db"

#initialise database then create users table if it doesn't exist
def initialize_db():
    connection = sqlite3.connect(DATABASE)
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      username TEXT NOT NULL UNIQUE,
                      password TEXT NOT NULL)''')
    connection.commit()
    connection.close()

#shows random recommended password for register
def generate_password():
    lower = 'abcdefghijklmnopqrstuvwxyz'
    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    numbers = '0123456789'
    symbols = '`@#$%^&*]'
    all_chars = lower + upper + numbers + symbols
    length = 16 #fixed limit of 16
    password = "".join(random.sample(all_chars, length)) #randomises
    return password

#when clicking play, if user is not logged in show message.
def play():
    if not hasattr(bfdb, 'logged_in') or not bfdb.logged_in:
        messagebox.showwarning("Warning", "Login to save progress") #pop up 
        logwindow(bfdb, redirect_to_db=True)
    else:
        redirect_to_db()

#define register
def register():
    regwindow(bfdb)

#define login
def login():
    logwindow(bfdb)

#redirects to part1
def redirect_to_db():
    subprocess.run(["python", "dashboard.py"])

#exit homepage
def exit_out():
    if messagebox.askokcancel("Exit", "Exit now?"):
        bfdb.destroy()

#clears all widgets 
def return_to_homepage():
    for widget in bfdb.winfo_children():
        widget.destroy()
    main_homepage()

#login window classification
class logwindow:
    def __init__(self, master, redirect_to_db=False):
        self.top = tk.Toplevel(master)
        self.top.title("Login")
        self.redirect_to_db = redirect_to_db
        self.top.attributes("-fullscreen", True) #make fullscreen

        #background image
        bg_img = Image.open("bftruck2.jpg")
        bg_img = bg_img.resize((self.top.winfo_screenwidth(), self.top.winfo_screenheight()))
        self.bg_photo = ImageTk.PhotoImage(bg_img)
        self.bg_label = tk.Label(self.top, image=self.bg_photo)
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)

        #login frame
        frame = tk.Frame(self.top, bg="white")
        frame.pack(expand=True)

        #font style and size
        label_font = ("MS Gothic", 20)
        entry_font = ("MS Gothic", 20)
        button_font = ("MS Gothic", 20)

        #labels and entry widgets for username and password
        tk.Label(frame, text="Username", font=label_font, bg="white").grid(row=0, pady=10, padx=10) #no column needed
        tk.Label(frame, text="Password", font=label_font, bg="white").grid(row=1, pady=10, padx=10)
        #username config
        self.e1 = tk.Entry(frame, font=entry_font) 
        self.e1.grid(row=0, column=1, pady=10, padx=10)
        #password config
        self.e2 = tk.Entry(frame, font=entry_font)
        self.e2.grid(row=1, column=1, pady=10, padx=10)
        self.e2.config(show="*") #convert characters to * for privacy

        #login button size and position
        tk.Button(frame, text="Login", command=self.Ok, height=2, width=10, font=button_font).grid(row=2, columnspan=2, pady=20)

        #links to register page
        tk.Label(frame, text="Don't have an account?", font=label_font, bg="white").grid(row=3, columnspan=2, pady=(20, 5))
        tk.Button(frame, text="Register Here", command=register, height=2, width=15, font=button_font).grid(row=4, columnspan=2)

        #return button size and poistion
        tk.Button(frame, text="Return", command=self.return_to_homepage, height=2, width=10, font=button_font).grid(row=5, columnspan=2, pady=20)
        
    #defining login details
    def Ok(self):
        uname = self.e1.get() #uname short for username
        password = self.e2.get()

        #if no input show warning
        if uname == "" or password == "":
            messagebox.showinfo("Warning", "Please fill out all fields.")
            return
        #checks database info
        connection = sqlite3.connect(DATABASE)
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (uname, password))
        user = cursor.fetchone()
        connection.close()
        #if matching info with database, allow access.
        if user:
            messagebox.showinfo("Success", "Login Success")
            bfdb.logged_in = True
            self.top.destroy() 
            if self.redirect_to_db:
                redirect_to_db()
        else:
            messagebox.showinfo("Warning", "Incorrect Username and/or Password")
    #defines return to hompeage function
    def return_to_homepage(self):
        #exits out of page to homepage
        self.top.destroy()
        return_to_homepage()

#register window
class regwindow:
    def __init__(self, master):
        self.top = tk.Toplevel(master)
        self.top.title("Register")
        self.top.attributes("-fullscreen", True)    

        #background image
        bg_img = Image.open("bftruck2.jpg")
        bg_img = bg_img.resize((self.top.winfo_screenwidth(), self.top.winfo_screenheight()))
        self.bg_photo = ImageTk.PhotoImage(bg_img)
        self.bg_label = tk.Label(self.top, image=self.bg_photo)
        self.bg_label.place(relwidth=1, relheight=1)

        #form for registration
        frame = tk.Frame(self.top, bg="white")
        frame.pack(expand=True)
        #font style and size
        label_font = ("MS Gothic", 20)
        entry_font = ("MS Gothic", 20)
        button_font = ("MS Gothic", 20)

        #labels and entry widgets for username, password, and confirm password
        tk.Label(frame, text="Username", font=label_font, bg="white").grid(row=0, pady=10, padx=10) #no need for column as they will all be 0
        tk.Label(frame, text="Password", font=label_font, bg="white").grid(row=1, pady=10, padx=10)
        tk.Label(frame, text="Confirm Password", font=label_font, bg="white").grid(row=2, pady=10, padx=10)
        self.e1 = tk.Entry(frame, font=entry_font)
        self.e1.grid(row=0, column=1, pady=10, padx=10)
        self.e2 = tk.Entry(frame, font=entry_font)
        self.e2.grid(row=1, column=1, pady=10, padx=10)
        self.e2.config(show="*") #password text converts to *
        self.e3 = tk.Entry(frame, font=entry_font)
        self.e3.grid(row=2, column=1, pady=10, padx=10)
        self.e3.config(show="*") #confirm password text converts to *

        #register button
        tk.Button(frame, text="Register", command=self.Ok, height=2, width=10, font=button_font).grid(row=3, columnspan=2, pady=20)

        #show random password (rec=recommended)
        self.rec_password = generate_password()
        tk.Label(frame, text="Recommended Password:", font=label_font, bg="white").grid(row=4, column=0, pady=10, padx=10)
        self.rec_password_label = tk.Label(frame, text=self.rec_password, font=entry_font, bg="white")
        self.rec_password_label.grid(row=4, column=1, pady=10, padx=10)
        #copy button which runs copy function
        self.copy_button = tk.Button(frame, text="Copy", command=self.copy_to_clipboard, height=2, width=10, font=button_font)
        self.copy_button.grid(row=5, columnspan=2, pady=10, padx=10)
    
        #link to login page
        tk.Label(frame, text="Already have an account?", font=label_font, bg="white").grid(row=6, columnspan=2, pady=(20, 5))
        tk.Button(frame, text="Login", command=self.redirect_to_login, height=2, width=15, font=button_font).grid(row=7, columnspan=2)
        tk.Button(frame, text="Return", command=self.return_to_homepage, height=2, width=10, font=button_font).grid(row=8, columnspan=2, pady=20)

    #defining register details
    def Ok(self):
        uname = self.e1.get()
        password = self.e2.get()
        confirm_password = self.e3.get()

        #if no user input, display warning
        if uname == "" or password == "" or confirm_password == "": #if user enters nothing show warning
            messagebox.showinfo("Warning", "No input detected.")
            return
        if password != confirm_password: #if password does not match 
            messagebox.showinfo("Warning", "Mismatching Password.")
            return
        
        #puts new user data into database
        connection = sqlite3.connect(DATABASE)
        cursor = connection.cursor()
        try:
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (uname, password))
            connection.commit()
            messagebox.showinfo("Success", "Registration Successful")
            self.top.destroy()
        except sqlite3.IntegrityError: #if username input matches user in database
            messagebox.showinfo("Error", "Username already exists.")
        finally:
            connection.close()
        #copy function
    def copy_to_clipboard(self):
        self.top.clipboard_clear()
        self.top.clipboard_append(self.rec_password)

    #goes to login page in register page
    def redirect_to_login(self):
        self.top.destroy()
        login()
    
    #return process for register page
    def return_to_homepage(self):
        self.top.destroy()
        return_to_homepage()

#homepage design
def main_homepage():
    bg_img = Image.open("bflanding.jpg") #background image
    bg_img = bg_img.resize((bfdb.winfo_screenwidth(), bfdb.winfo_screenheight()))
    bg_photo = ImageTk.PhotoImage(bg_img)
    bg_label = tk.Label(bfdb, image=bg_photo)
    bg_label.image = bg_photo
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)
    bfdb.attributes("-fullscreen", True) #makes fullscreen

    #button frame
    button_frame = tk.Frame(bfdb)
    button_frame.pack(side=tk.TOP, anchor=tk.NE, padx=10, pady=5)

    #register and login button
    reg_button = tk.Button(button_frame, text="Register", command=register, width=15, height=3, font=("MS Gothic", 12))
    reg_button.pack(side=tk.RIGHT, padx=5)
    log_button = tk.Button(button_frame, text="Login", command=login, width=15, height=3, font=("MS Gothic", 12))
    log_button.pack(side=tk.RIGHT)    

    #title label
    title_label = tk.Label(bfdb, text="BESOTTED FATE", font=("MS Gothic", 50), fg="black")
    title_label.pack(pady=(150, 40))   

    #play help and exit buttons
    play_button = tk.Button(bfdb, text="Play", command=play, width=20, height=5, font=("MS Gothic", 15))
    play_button.pack(pady=(20, 10))
    help_button = tk.Button(bfdb, text="Help", command=help, width=20, height=5, font=("MS Gothic", 15))
    help_button.pack(pady=10)
    exit_button = tk.Button(bfdb, text="Exit", command=exit_out, width=20, height=5, font=("MS Gothic", 15))
    exit_button.pack(pady=10, anchor=tk.CENTER)

#help page
def help():
    help_window = tk.Toplevel(bfdb)
    help_window.title("Help") #sets help title
    help_window.attributes('-fullscreen', True) #makes help page fullscreen
    help_frame = tk.Frame(help_window, bg='white')
    help_frame.place(relwidth=1, relheight=1)
    help_img= Image.open("bfgarage.jpg") #background image and makes screen size
    help_img = help_img.resize((bfdb.winfo_screenwidth(), bfdb.winfo_screenheight()))
    help_img = ImageTk.PhotoImage(help_img)
    #help title customisation
    help_label = tk.Label(help_frame, image=help_img)
    help_label.place(relwidth=1, relheight=1)
    title_label = tk.Label(help_frame, text="Help", font=("MS Gothic", 50), bg='white')
    title_label.pack(pady=20)

    help_text = """
    How to Play:

    Besotted Fate is a story decision-based game where you wake up in a factory in an unknown location. 
    Your mission is to survive and escape, preferably shutting down this criminal enterprise.

    Press spacebar or arrow keys to continue with dialogue.
    Read through the dialogue and choose one out of three choices that you think is best. 
    This will lead you through an adventure that can lead to multiple different endings. 
    Every day is a checkpoint. If you die, you will be redirected to your latest day.

    To reset your progress, you can do this by going to play > settings > reset progress.

    Note that there is no audio within the game.

    Credits:
    Kieron O. - Writer and Developer
    StableDiffusionWeb - AI Art Generator
    KD, KC - Assistance with Grammar and Storyline
    """

    #text label customisation
    text_label = tk.Label(help_frame, text=help_text, font=("MS Gothic", 18), bg='white', wraplength=help_window.winfo_screenwidth())
    text_label.pack(pady=20)
    #return button customisation
    return_button = tk.Button(help_frame, text="Return", font=("MS Gothic", 18), command=help_window.destroy)
    return_button.pack(pady=20)
    help_label.img = help_img

#app title
bfdb = tk.Tk()
bfdb.title("Besotted Fate")
initialize_db()
main_homepage()
bfdb.mainloop()
